#!/usr/bin/env python3
##
## EPITECH PROJECT, 2024
## 105 demo
## File description:
## 105 demo
##
import sys
from math import *
import csv


class Demo:
    def __init__(self, filename, pays):
        self.filename = filename
        self.arg = pays
        self.data = []
        self.all_years = list(range(1960, 2018))
        self.read_file()

    def run(self):
        self.manage_ini()
        self.manage_word_pays()
        self.check_pays()
        self.load_pays()
        self.total_pays()
        self.get_value()
        self.get_a_b()
        self.root_mean()
        self.get_value_inv()
        self.get_a_b_inv()
        self.root_mean_inv()
        self.correlation()
        self.disp()

    def read_file(self):
        with open(self.filename, "r") as fichier_csv:
            self.lecteur_csv = csv.reader(fichier_csv, delimiter=";")
            for ligne in self.lecteur_csv:
                self.data.append(ligne)

    def disp(self):
        print("Fit 1")
        if self.a >= 0:
            print("\tY = ", format(self.b / 1000000, ".2f"), " X + ", format(self.a / 1000000, ".2f"), sep="")
        else:
            print("\tY = ", format(self.b / 1000000, ".2f"), " X - ", format(self.a / 1000000 * -1, ".2f"), sep="")
        print("\tRoot-mean-square deviation: ", format(sqrt(self.root) / 1000000, ".2f"), sep="")
        print("\tPopulation in 2050: ", format((2050 * self.b + self.a) / 1000000, ".2f"), sep="")
        print("Fit 2")
        if self.inv_a >= 0:
            print("\tX = ", format(self.inv_b * 1000000, ".2f"), " Y + ", format(self.inv_a, ".2f"), sep="")
        else:
            print("\tX = ", format(self.inv_b * 1000000, ".2f"), " Y - ", format(self.inv_a * -1, ".2f"), sep="")
        print("\tRoot-mean-square deviation: ", format(sqrt(self.inv_root) / 1000000, ".2f"), sep="")
        print("\tPopulation in 2050: ", format(((2050 - self.inv_a) / self.inv_b / 1000000), ".2f"), sep="")
        print("Correlation: ", format(self.cor, ".4f"), sep="")

    def manage_ini(self):
        self.ini = []
        i = 0
        for i in range(len(self.data)):
            self.ini.append(self.data[i][1])

    def manage_word_pays(self):
        self.word = []
        i = 0
        for i in range(len(self.data)):
            self.word.append(self.data[i][0])

    def check_pays(self):
        j = 0
        i = 0
        self.index = []
        self.name = []
        while i < len(self.ini) and j < len(self.arg):
            if self.arg[j] == self.ini[i]:
                self.name.append(self.word[i])
                self.index.append(i)
                j += 1
                i = 0
            i += 1
        if len(self.name) != len(self.arg):
            exit(84)
        self.name.sort()
        print("Country: ", sep="", end="")
        for i in range(len(self.name) - 1):
            print(self.name[i], end=" ")
        print(self.name[len(self.name) - 1])
        self.index.sort()

    def load_pays(self):
        self.pays = []
        j = 0
        i = 0
        while i < len(self.data) and j < len(self.index):
            if i == self.index[j]:
                self.pays.append(self.data[i])
                j += 1
            i += 1

    def total_pays(self):
        self.tot_pays = [0] * 58
        for i in range(0, len(self.pays)):
            for j in range(2, len(self.pays[i])):
                self.tot_pays[j - 2] += int(self.pays[i][j])

    def get_a_b(self):
        self.a = (self.somme[0] * self.somme[2] - self.somme[1] * self.somme[3]) / (
            len(self.all_years) * self.somme[2] - self.somme[1] ** 2
        )
        self.b = ((len(self.all_years) * self.somme[3]) - (self.somme[0] * self.somme[1])) / (
            (len(self.all_years) * self.somme[2]) - self.somme[1] ** 2
        )

    def get_a_b_inv(self):
        self.inv_a = (self.somme[0] * self.somme[2] - self.somme[1] * self.somme[3]) / (
            len(self.all_years) * self.somme[2] - self.somme[1] ** 2
        )
        self.inv_b = ((len(self.all_years) * self.somme[3]) - (self.somme[0] * self.somme[1])) / (
            (len(self.all_years) * self.somme[2]) - self.somme[1] ** 2
        )

    def get_value(self):
        self.somme = [0] * 4
        for i in range(0, len(self.tot_pays)):
            self.somme[0] += self.tot_pays[i]
            self.somme[1] += self.all_years[i]
            self.somme[2] += self.all_years[i] ** 2
            self.somme[3] += self.tot_pays[i] * self.all_years[i]

    def get_value_inv(self):
        self.somme = [0] * 4
        for i in range(0, len(self.tot_pays)):
            self.somme[0] += self.all_years[i]
            self.somme[1] += self.tot_pays[i]
            self.somme[2] += self.tot_pays[i] ** 2
            self.somme[3] += self.tot_pays[i] * self.all_years[i]

    def root_mean(self):
        self.root = 0
        for i in range(0, len(self.tot_pays)):
            func = self.all_years[i] * self.b + self.a
            self.root += (func - self.tot_pays[i]) ** 2 / len(self.tot_pays)

    def root_mean_inv(self):
        self.inv_root = 0
        for i in range(0, len(self.tot_pays)):
            func = (self.all_years[i] - self.inv_a) / self.inv_b
            self.inv_root += (func - self.tot_pays[i]) ** 2 / len(self.tot_pays)

    def correlation(self):
        predictions = [self.b * year + self.a for year in self.all_years]
        mean_obt = sum(self.tot_pays) / len(self.tot_pays)
        mean_pre = sum(predictions) / len(predictions)
        num = sum(
            (observed - mean_obt) * (predicted - mean_pre) for observed, predicted in zip(self.tot_pays, predictions)
        )
        deno_obs = sum((observed - mean_obt) ** 2 for observed in self.tot_pays)
        deno_pre = sum((predicted - mean_pre) ** 2 for predicted in predictions)
        self.cor = num / (sqrt(deno_obs) * sqrt(deno_pre))


if __name__ == "__main__":
    pays = []
    for i in range(1, len(sys.argv)):
        pays.append(sys.argv[i])
    if len(pays) < 1:
        exit(84)
    try:
        demography = Demo("./105demography_data.csv", pays)
        demography.run()
    except:
        sys.exit(84)
    sys.exit(0)
