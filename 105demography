#!/usr/bin/env python3
##
## EPITECH PROJECT, 2024
## 105 demo
## File description:
## 105 demo
##
import sys
from math import *
import csv


def print_h():
    print("USAGE\n   ./105demography [code]+\n\nDESCRIPTION\n    code      country code")
    return 0


def somme_xy(pays):
    comp = 0
    for i in range(len(pays)):
        anne = 1960
        for j in range(2, 60):
            comp += int(pays[i][j]) * anne
            anne += 1
    return comp


def somme_x(pays):
    years = list(range(1960, 2018))
    total_sum = sum(years)
    return total_sum


def somme_x_carre(pays):
    years = list(range(1960, 2018))
    total_sum_of_squares = sum(year**2 for year in years)
    return total_sum_of_squares


def somme_y_carre(pays):
    comp = 0
    for i in range(len(pays)):
        for j in range(2, 60):
            comp += int(pays[i][j]) ** 2
    return comp


def somme_y(pays):
    comp = 0
    for i in range(len(pays)):
        for j in range(2, 60):
            comp += int(pays[i][j])
    return comp


def calculate_a(pays):
    a = ((2017 - 1960 + 1) * somme_xy(pays)) - (somme_y(pays) * somme_x(pays))
    den = ((2017 - 1960 + 1) * somme_x_carre(pays)) - (somme_x(pays) ** 2)
    res = a / den
    return res


def calculate_b(pays):
    a = somme_y(pays) * somme_x_carre(pays) - somme_x(pays) * somme_xy(pays)
    den = ((2017 - 1960 + 1) * somme_x_carre(pays)) - (somme_x(pays) ** 2)
    res = a / den
    return res
def calculate_a_inverse(pays):
    a = (((2017 - 1960 + 1) * len(pays))* somme_xy(pays)) - (somme_y(pays) * somme_x(pays))
    den = (((2017 - 1960 + 1) * len(pays))* somme_y_carre(pays)) - (somme_y(pays)**2)
    res = a / den
    return res

def calculate_b_inverse(pays):
    a = (somme_x(pays)*somme_y_carre(pays)) - (somme_y(pays) * somme_xy(pays))
    den = (((2017 - 1960 + 1) * len(pays)) * somme_y_carre(pays)) - (somme_y(pays)**2)
    res = a / den
    return res


def root_mean_square(pays, a, b):
    comp = 0
    anne = 1960
    for i in range(2, 60):
        siuu = 0
        for j in range(len(pays)):
            siuu += int(pays[j][i])
        comp += (siuu - (a * anne + b)) ** 2
        anne += 1
    return sqrt(comp / (2017 - 1960 + 1))


def country(data, argv):
    pays = []
    for country in argv:
        for check in data:
            if country == check[1]:
                pays.append(check[0])
    pays = sorted(pays)
    print("Country:", end="")
    for i in range(len(pays) - 1):
        print(" " + pays[i] + ",", end="")
    print(" " + pays[len(pays) - 1] + "\nFit1")
    pays = []
    for country in argv:
        for check in data:
            if country == check[1]:
                pays.append(check)
    return pays


def main(argv):
    if argv[0] == "-h":
        return print_h()
    data = []
    with open("105demography_data.csv", "r") as fichier_csv:
        lecteur_csv = csv.reader(fichier_csv, delimiter=";")
        for ligne in lecteur_csv:
            data.append(ligne)
    pays = country(data, argv)
    a = calculate_a(pays)
    b = calculate_b(pays)
    if b < 0:
        print("    Y = " + "{:.2f}".format(a / 1000000) + " X - " + "{:.2f}".format((b * -1) / 1000000))
    else:
        print("    Y = " + "{:.2f}".format(a / 1000000) + " X + " + "{:.2f}".format(b / 1000000))
    root = root_mean_square(pays, a, b)
    print("    Root-mean-square deviation: " + "{:.2f}".format(root / 1000000))
    print("    Population in 2050: " + "{:.2f}\nFit2".format((a * 2050 + b) / 1000000))

    inverse_a = calculate_a_inverse(pays)
    inverse_b = calculate_b_inverse(pays)
    print("    Y = " + "{:.2f}".format(inverse_a * 1000000) + " X + " + "{:.2f}".format(inverse_b))
    root = 0
    print("    Root-mean-square deviation: " + "{:.2f}".format(root / 1000000))
    print("    Population in 2050: " + "{:.2f}".format(inverse_a * 2050 + inverse_b))
    return 0


if __name__ == "__main__":
    # try:
    main(sys.argv[1:])
    # except:
    #     sys.exit(84)
    sys.exit(0)
